#define BLYNK_PRINT Serial

// Information for the Blynk Device
#define BLYNK_TEMPLATE_ID "TMPL6WNukz17k"
#define BLYNK_TEMPLATE_NAME "IED project"
#define BLYNK_AUTH_TOKEN "ZvoAk7z4Ao2IbbiL870qqaqBGsHzZtri"

// Defining pins for Arduino components
#define IN1_right 9
#define IN2_right 6
#define IN3_left 5
#define IN4_left 3
#define TrigPin1 11
#define EchoPin1 10
#define TrigPin2 8
#define EchoPin2 7
#define DHTPIN A1
#define bita 12
#define bitb 2
#define BuzzerPin 4


// Libraries
#include <SPI.h>
#include <WiFi.h>
#include <BlynkSimpleWifi.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <DHT.h>
#include <Buzzer.h>

LiquidCrystal_I2C lcd(0x27,16,2); 

DHT dht(DHTPIN, DHT11);

BlynkTimer timer;
Buzzer buzzer(BuzzerPin);

// Function prototypes
void Motor(String direction);
void smartcar();
void Check_Obstacles(int RightDist, int LeftDist);
void Front_Obstacle();
void Left_Obstacle();
void Right_Obstacle();
int Right_Ultrasound(void);
int Left_Ultrasound(void);
void sendSensor();
void FrontfireAlert();
void BackfireAlert();
void checkBlynkConnection();

volatile bool FrontfireDetected = false;
volatile bool BackfireDetected = false;

bool forward = 0;
bool reverse = 0;
bool left = 0;
bool right = 0;


char ssid[] = "Jeisis"; // Wifi credentials
char pass[] = "12345678"; // Wifi password

void setup()
{
  
  Serial.begin(9600); // Debug console

  buzzer.begin(BuzzerPin);

  // Initialising LCD
  lcd.init();
  lcd.backlight();
  dht.begin();
  lcd.setCursor(0, 0);
  lcd.print("Temp:");
  lcd.setCursor(0, 1);
  lcd.print("Humidity:");

 pinMode(IN1_right, OUTPUT);
 pinMode(IN2_right, OUTPUT);
 pinMode(IN3_left, OUTPUT);
 pinMode(IN4_left, OUTPUT);
 pinMode(TrigPin1, OUTPUT);
 pinMode(EchoPin1, INPUT);
 pinMode(TrigPin2, OUTPUT);
 pinMode(EchoPin2, INPUT);
 pinMode(bita, INPUT_PULLUP);
 pinMode(bitb, INPUT_PULLUP);
 pinMode(BuzzerPin, OUTPUT);
 
 attachInterrupt(digitalPinToInterrupt(bita), FrontfireAlert, FALLING);
 attachInterrupt(digitalPinToInterrupt(bitb), BackfireAlert, FALLING);

 Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

 timer.setInterval(1000L, sendSensor); // Send data every 0.1 seconds
 timer.setInterval(30000L, checkBlynkConnection); // Check WiFi every 30 seconds

}

void loop()
{
  Blynk.run(); //Initiates Blynk
  timer.run(); // Initiates timer

  while(FrontfireDetected || BackfireDetected)
  {
    
    for (int i = 500; i <= 1000; i += 10)
    {
      buzzer.sound(i, 20);
    }
    for (int i = 1000; i >= 500; i -= 10)
    {
      buzzer.sound(i, 20);
    }

    FrontfireDetected = false;
    BackfireDetected = false;

  }

  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t)) 
  {
    lcd.print("ERROR");
    return;
  }

  lcd.setCursor(5,0);
  lcd.print(t);
  lcd.setCursor(9,1);
  lcd.print(h);


  int RightDist = Right_Ultrasound();
  int LeftDist = Left_Ultrasound();

  Check_Obstacles(RightDist, LeftDist);

}

// Blynk_Write functions for getting values from the phone
BLYNK_WRITE(V0)
{
  forward = param.asInt(); // forward button
}

BLYNK_WRITE(V1)
{
  reverse = param.asInt(); // reverse button
}

BLYNK_WRITE(V2)
{
  left = param.asInt(); // left button
}

BLYNK_WRITE(V3)
{
  right = param.asInt(); // right button
}

void sendSensor()
{
  float h = dht.readHumidity();
  float t = dht.readTemperature(); 

  if (isnan(h) || isnan(t)) 
  {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  Blynk.virtualWrite(V5, h); // send humidity values to Phone
  Blynk.virtualWrite(V6, t); // send temperature values to Phone
}

void smartcar() // Function for controlling the car using WiFi
{
  if(forward == 1)
  {
    move("forward");
  }
  else if (reverse == 1)
  {
    move("reverse");
  }
  else if (left == 1)
  {
    move("left");
  }
  else if (right == 1)
  {
    move("right");
  }
  else
  {
    move("stop");
  }

}

// Function for Motor 
void move(String direction)
{
  
  if (direction == "stop") // For Stopping the car
  {
    analogWrite(IN3_left, 0);
    digitalWrite(IN4_left, LOW);
    analogWrite(IN1_right, 0);
    digitalWrite(IN2_right, LOW);
  }

  else if (direction == "forward")  // For forward movement
  {
    analogWrite(IN3_left, 100);
    digitalWrite(IN4_left, LOW);
    analogWrite(IN1_right, 140); // Not the same PWM as we calibrated it due to some hardware issues in the wheel
    digitalWrite(IN2_right, LOW);
  }

  else if (direction == "reverse") // For reverse movement
  {
    analogWrite(IN3_left, LOW);
    digitalWrite(IN4_left, 100); 
    analogWrite(IN1_right, LOW);
    digitalWrite(IN2_right, 100); 
  }

  else if (direction == "left") // For left movement
  {
    analogWrite(IN3_left,LOW);
    digitalWrite(IN4_left, 30);
    analogWrite(IN1_right, 30);
    digitalWrite(IN2_right, LOW);
  }

  else if (direction == "right") // For right movement
  {
    analogWrite(IN3_left, 30);
    digitalWrite(IN4_left, LOW);
    analogWrite(IN1_right,  LOW);
    digitalWrite(IN2_right, 30);
  }

  else // If user inputs invalid direction parameters
  {
    Serial.println("Invalid direction input");
  }

}

int Right_Ultrasound(void) // Function for Ultrasound
{

long pulseDuration;
int Distance;

digitalWrite(TrigPin1, LOW);
delayMicroseconds(2);
digitalWrite(TrigPin1, HIGH);
delayMicroseconds(10);

pulseDuration = pulseIn(EchoPin1, HIGH);
Distance = pulseDuration / 58;

return(Distance);

}

int Left_Ultrasound(void)
{

long pulseDuration;
int Distance;

digitalWrite(TrigPin2, LOW);
delayMicroseconds(2);
digitalWrite(TrigPin2, HIGH);
delayMicroseconds(10);

pulseDuration = pulseIn(EchoPin2, HIGH);
Distance = pulseDuration / 58;

return(Distance);

}

void Check_Obstacles(int RightDist, int LeftDist) 
{
  const int CLOSE_DISTANCE = 20;  // Distance threshold to detect close obstacles
  const int SAFE_DISTANCE = 40;  // Distance threshold for safe operation

  if (RightDist < CLOSE_DISTANCE || LeftDist < CLOSE_DISTANCE) 
  {
   
    if (RightDist < CLOSE_DISTANCE && LeftDist >= CLOSE_DISTANCE)  // Obstacle detected on one or both sides
    {
      
      Right_Obstacle(); // Obstacle on the right; move left
    } 
    else if (LeftDist < CLOSE_DISTANCE && RightDist >= CLOSE_DISTANCE) 
    {
      
      Left_Obstacle(); // Obstacle on the left hence move right
    } 
    else 
    {
      
      Front_Obstacle(); // Obstacles on both sides hence stop
    }
  }

  else 
  {
    
    if (RightDist < SAFE_DISTANCE && LeftDist < SAFE_DISTANCE) // No close obstacles
    {
      
      Front_Obstacle(); // Obstacles moderately close in front hence stop
    } 
    else 
    {
      
      smartcar(); // Path is clear proceed with normal operations
    }
  }
}

void Front_Obstacle()
{
  if(reverse == 1)
  {
    move("reverse");
  }

  else
  {
    move("stop");
  }

}

void Right_Obstacle()
{
  if(left == 1)
  {
    move("left");
  }

  else
  {
    move("stop");
  }
}

void Left_Obstacle()
{
  if(right == 1)
  {
    move("right");
  }

  else
  {
    move("stop");
  }
}

void checkBlynkConnection() // Checks if WiFi is connected
{
  if (!Blynk.connected())
  {
    Serial.println("Reconnecting to Blynk...");
    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  }
}

void FrontfireAlert() // ISR function for bita
{
  FrontfireDetected = true;
}

void BackfireAlert() // ISR function for bitb
{
  BackfireDetected = true;
}
